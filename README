openDias - Document Imaging Archive System

  1. Introduction
    1.1 Quick Start
  2. Satisfying Dependencies
    2.1 Required
    2.2 Optional
    2.3 Shortcut - install dependencies by package
  3. Building
    3.1 As a user
    3.2 As a developer
  4. Running
  5. Developing
    5.1 Before submitting a 'pull request'
    5.2 Accepting a pull request
    5.3 Distribution

-----------------------------------

1. Introduction

  [please add]

1.1 Quick Start
---------------
Download the latest tarball (opendias-x.y.x.tar.gz) from http://opendias.essentialcollections.co.uk/downloads
  tar -xvfz opendias-x.y.z.tar.gz
  cd opendias-x.y.z
  ./configure
  make
  make install
Start the application:
  sudo /usr/local/bin/opendias
Use the application, by visiting:
  http://localhost:8988/opendias

-----------------------------------

2. Satisfying Dependencies

  In order to include certain functionality you will 
  need to provide third party libraries and headers.
  This is a list of what you will need.

2.1 Required
------------

  sqlite3
  microhttpd
  uuid
  ssl

2.2 Optional
------------ 

  2.2.1 For scanning
    sane
    leptonica

  2.2.2 For OCR
    tesseract3-ocr
    leptonica

  2.2.3 For ODF import
    magic
    xml2
    zzip

  2.2.4 For PDF import
    magic
    poppler-cpp

2.3 Short cut
-------------

On, Debian or Ubuntu, you can do this by running:

  sudo apt-get install build-essential libsqlite3-dev libsane-dev \
    libmicrohttpd-dev uuid-dev libleptonica-dev libpoppler-cpp-dev \
    libtesseract-dev libxml2-dev libzzip-dev libmagic-dev libssl-dev

On, RedHat or Fedora, you can do this by running:

  su - 
  yum install gcc-c++ make sqlite-devel libmicrohttpd-devel libssl-devel \
    libuuid-devel sane-backends-devel leptonica-devel file-devel \
    tesseract-devel libxml2-devel zziplib-devel poppler-cpp-devel

-----------------------------------

3. Building

3.1 As a user
-------------
If you downloaded the release tarball (opendias-x.y.x.tar.gz)
You can build and install by issuing the following commands:

  ./configure
  make
  make install

3.2 As a developer
------------------
If you downloaded the source from, the GIT tree at GitHub.
You need to pre configure the source:

  install autoconf tools
  cd current_code
  autoreconf -iv
  ./configure -C
  make
  make install
  cd test
  [get setup by following the local README file]
  ./setupRun.sh 
  [run client side tests test/clientSideTesting/README]
  [refer '5. Developing' for details on publishing]

-----------------------------------

4. Running

Start and get to the apllication with:

  sudo /usr/local/bin/opendias

point a web browser at:

  http://localhost:8988/opendias

This needs to be 'localhost' as the default setting only allow
access from there. Visit 'Access Controls' and setup access
from other parts of your network [or specific user (not yet
implemented)]. Then you can point a browser at:

  http://myServer.com:8988/opendias

or use a forwarding proxy (eg Apache) to remove the port number. eg:

  RewriteRule ^/opendias(.*)$ http://myServer.com:8988/opendias$1 [P]

to be able to point a web browser at:

  http://myproxyServer.com/opendias



-----------------------------------

5. Developing

5.1 Before submitting a 'pull request'
--------------------------------------
 * Ensure you are working against the most current codebase
 * Create a git branch off the current development branch (eg development_0_9)
 * Hack away
 * Update Changelog, api doc, builds file (eg. Make.am or configure.ac).
 * Write new tests to cover your new functionality
 * Update current tests where appropriate
    If tests fail (due to memory issues) sometime the stacktrace is missing some 
    detail because it's been optimised away. eg:
      ==6053== 33 bytes in 1 blocks are definitely lost in loss record 3 of 9
      ==6053==    at 0x402BE68: malloc (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
      ==6053==    by 0x80545E1: o_strdup (utils.c:207)
      ==6053==    by 0x531C307: ???
    If this is the case, you can try and run the test again after configuring then 
    building without optimisation using:
      "./configure 'CFLAGS=-O0 -g' --prefix=/tmp/opendias_tmp"
    run, "make clean && make && make install", and then the test again (with 
    the -b flag - to stop your specially configured app from being rebuilt in the 
    standard way.) You should not get better stack traces:
      ==10695== 33 bytes in 1 blocks are definitely lost in loss record 3 of 9
      ==10695==    at 0x402BE68: malloc (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
      ==10695==    by 0x8056400: o_strdup (utils.c:207)
      ==10695==    by 0x80517C3: checkLogin (pageRender.c:617)
      ==10695==    by 0x804FEF8: answer_to_connection (web_handler.c:954)
      ==10695==    by 0x40F20CF: ??? (in /usr/lib/libmicrohttpd.so.5.2.1)
      ==10695==    by 0x40F3216: ??? (in /usr/lib/libmicrohttpd.so.5.2.1)
      ==10695==    by 0x40F5528: ??? (in /usr/lib/libmicrohttpd.so.5.2.1)
      ==10695==    by 0x40F569E: ??? (in /usr/lib/libmicrohttpd.so.5.2.1)
      ==10695==    by 0x42B1D4B: start_thread (pthread_create.c:308)
      ==10695==    by 0x4C58D3D: clone (clone.S:130)
 * Run autoscan, cppcheck.
    autoscan
    cppcheck --verbose --enable=all src/
 * Ensure all tests pass
    cd test && ./setupRun.sh
 * Submit a 'pull request' into current development branch


5.2 Accepting a pull request
----------------------------
 * Inspect the diffs between the current development branch and the end of the authors branch.
 * Submit update feedback to the author, if required.
 * Checkout the authors branch and ensure the tests pass.
 * git merge the authors branch into the development branch.
 * bump the configure.ac version number.
 * consolidate Changelog


5.3 Distribution
----------------
 * git merge the development branch into master
 * Checkout master and ensure the tests pass.
 * Ensure the general checks are satisfied
    autoreconf -iv
    autoscan
    cppcheck --verbose --enable=all src/
 * Get the api doc and Changelog diffs, and update the website.
 * bump the configure.ac version number
 * Generate distribution tarball
    make distcheck


