###################################################################################
## EDITED THIS DOC? NOW GO UPDATE essesntialcollections.co.uk/openDIAS/api.shtml ##
###################################################################################
Request method
	Any of the API calls can be make invoken by making an 
	HTTP POST request to the "/opendias/dynamic" entry point,
	over the port that the application is running on.
	Usually this would be done via an AJAX call on a webpage,
	but could just as easily be make from any application.
	eg, this is a call to invoke a new scanning operation 
	from bash.

telnet localhost 8988 <<__endjob
POST /opendias/dynamic HTTP/1.1
Host: localhost:8988
User-Agent: Mozilla/5.0
Accept: application/xml, text/xml, */*
Accept-Language: en-gb,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 115
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Referer: http://localhost:8988/opendias/acquire.html
Content-Length: 100
Pragma: no-cache
Cache-Control: no-cache

action=doScan&deviceid=test%3A0&format=Grey+Scale&pages=1&&resolution=300&ocr=-&pagelength=100
__endjob


Error Response
	Any of the API calls could return an error message. Fontends 
	should check for this error and take appropriate action.
	Outputs:
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  error - a message describing the problem
		</Response>



getScanningProgress -> pageRender::getScanningProgress()
	Called from: openDias.acquire.js :: getScanningProgress()
	Purpose: Read the state of an asyncronouse scan.
	Inputs:	action: fixed string 'getScanningProgress'
		scanprogressid: The uuid of the scanning process (as returned by 'doScan')
	Outputs:
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <ScanningProgress>
		    status* - the current action being done by the system
		    value - representation of how far along the action being done, is.
		  </ScanningProgress>
		</Response>



nextPageReady -> pageRender::nextPageReady()
	Called from: openDias.acquire.js :: ananoumouse()
	Purpose: Signal to the application that the user has correctly placed the next page for scanning.
	Inputs:	action: fixed string 'nextPageReady'
		scanprogressid: The uuid of the scanning process (as returned by 'doScan')
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <NextPageReady>
		    result - indication if the next page command was accepted, currently a fixed string 'ok'
		  </NextPageReady>
		</Response>



getScannerList -> pageRender::getScannerList()
	Called from: openDias.acquire.js :: ananoumouse()
	Purpose: Get a list of scanners (and their usage parameters) that the application can use.
	Inputs:	action: fixed string 'getScannerList'
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <ScannerList cached='true'>    -- optional param, present if data is returned from the cache
		    <Devices>
		      <Device>
		        <Formats>
              format - the format that a scan can be performed in. currently only fixed string 'grey scale'
		          ...
            </Formats>
            type - sane text that describes the scanning device (eg 'flat bed')
            vendor - sane text that names the scanning device
            model - sane text that names the scanning device
            host - text representation of the location of the scanner
            name - the machine id for the scanning device
            default - the default resolution
            min - the minimum resolution allowed by the scanning decice
            max - the maximum resolution allowed by the scanning device
		      </Device>
		      ...
		    </Devices>
		  </ScannerList>
		</Response>



doScan -> pageRender::doScan()
	Called from: openDias.acquire.js :: ananoumouse()
	Purpose: Starts a scanning process.
	Inputs:	action: fixed string "doScan",
          deviceid: The sane device id, as provided by getScannerList : Response.ScannerList.Devices.Device.name
          format: The format to use for scannsing, one of getScanningList : Response.ScanningList.Devices.Device.Formats.format
          pages: The number of pages that make up the document,
          resolution: The resolution to set the scanner to, between Response.ScannerList.Devices.Device.min and Response.ScannerList.Devices.Device.max,
          ocr: Flag to indicate if an OCR process should be performed and in what language,
          pagelength: The length of the page to scan, Percent, in relation to the maximum available by the scanner.
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		</Response>
		  </DoScan>
		    scanuuid - The application uniq id for the scanning process.
		  </DoScan>
		</Response>



docFilter -> pageRender::docFilter
	Called from: openDias.filter.js :: ananoumouse()
	Purpose: Get a list of documents that fit a specific set of cryteria
	Inputs:	action: fixed string 'docFilter'
          subaction: Get all details or just the count of matching docs ['count','fullList']
          textSearch: Text that a document must match (title or ocr text)
          isActionRequired: If 'true' return only records that are marked as 'action required'.
          startDate: The first date that a document could fit into
          endDate: The last date that a document could fit into
          tags: Comma delimetered list of tagnames.
          page: The number of 'range' offsets to apply before the first returned row.
          range: The number of records to return in a single request.
          sortfield*: Order the results by column
          sortorder: present results in acending/decending order ['0','1']
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <DocFilter>
        count - The count of matching documents
        page - The requested page
		    <Results>
		      docid - the document id of a found document
          actionrequired - indicator flag
		      title - the user defined title of the found document
		      type* - the style of document
		      date - the user defined date of the found document
		    </Results>
		  </DocFilter>
		</Response>




getAudio -> [stump - not currently implemented]
	Called from: openDias.loadDetails.js :: ananoumouse()
	Purpose: Get the web accessable filename that contains the read OCR 
	Inputs:	action: fixed string 'getAudio'
          docid: the documents id
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <Audio>
		    filename - the filename that contains the audio of the selected doc 
		  </Audio>
		</Response>



getDocDetail -> docEditor::getDocDetail
	Called from: openDias.loadDetails.js :: ananoumouse()
	Purpose: Get all the current information about a document 
	Inputs:	action: fixed string 'getDocDetail'
          docid: the documents id
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <DocDetail>
		    docid - the docid of the selected doc
		    title - the user defined title of the selected doc (a default text is provided if NULL)
		    extractedText - the OCR text of the selected doc
		    docDate - the user defined date of the selected doc
		    scanDate - the date that the document was added to the application.
		    type* - the style of document
		    pages - the number of pages used by the document
        actionrequired - indication if the document has been flagged as requiring an action
        hardcopyKept - indication if the original document has been retained
		    x - the number of horizontal pizel required by the document
		    y - the number of lines required by the document
		    <Taqs>
		      <tag>
		        tagname - the name of the assigned tag
		      </tag>
		      ...
		    </Tags>
		    <DocLinks>
		      <doc>
		        targetDocid - the docid of the linked doc
            targetTitle - the user defined title of the linked doc (a default text is provided if NULL)
		      </doc>
		      ...
		    </DocLinks>
		  </DocDetail>
		</Response>



updateDocDetails -> docEditor::updateDocDetails
	Called from: openDias.saveDetails.js :: ananoumouse()
	Purpose: Update a documents field with a specific value. 
	Inputs:	action: fixed string 'updateDocDetails'
          docid: the documents id
          kkey: the name of the field that is being updated ['ocrtext','title','docDate','actionrequired','hardcopyKept']
          vvalue: the new value to set the field to
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <UpdateDocDetails>
		    status - indication of the update process - currently a static string 'OK'
		  </UpdateDocDetails>
		</Response>



moveTag -> docEditor::updateTagLinkage
	Called from: openDias.saveDetails.js :: ananoumouse()
	Purpose: Updates links between documents n tags, and document n documents
	Inputs:	action: fixed string 'moveTag'
          docid: the documents id
          tag: the tag that is being (un)linked
          subaction: flag to indicate if the tag should be added or removed ['addTag','removeTag','addDoc','removeDoc']
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <MoveTag>
		    status - indication of the update process - currently a static string 'OK'
		  </MoveTag>
		</Response>



deleteDoc -> docEditor::doDelete
	Called from: openDias.saveDetails.js :: ananoumouse()
	Purpose: Removes a document from the database and scanned images store.
	Inputs:	action: fixed string 'deleteDoc'
          docid: the documents id
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <DeleteDoc>
		    status - indication of the update process - currently a static string 'OK'
		  </DeleteDoc>
		</Response>



regenerateThumb -> import_doc::extractThumbnail
  Called from: openDias.acquire.js :: ananoumouse()
  Purpose: Creates a thumbnail of PDF documents (some PDFs imported with earlier version of openDIAS did not have a thumbnail created for them at import time)
	Inputs:	action: fixed string 'regenerateThumb'
          docid: the documents id
  Outputs: 
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <RegenerateThumb>
		    status - indication of the update process - currently a static string 'OK'
		  </RegenerateThumb>
		</Response>



checkLogin -> pageRender::checkLogin
	Called from: openDias.userdetails.js :: loginbutton
	Purpose: Checks login details and assigns the user role to the session, on success
	Inputs:	action: fixed string 'checkLogin'
          username: The username to login with
          password: The usernames password
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <Login>
        result - Was login successful ['OK','FAIL']
        message - User message when result was 'FAIL'
        retry_throttle - The number of seconds that must pass before a further login attempt will be accepted.
		  </Login>
		</Response>



logout -> pageRender::doLogin
	Called from: openDias.userdetails.js :: logoutbutton
	Purpose: Removes any user specific information from the session
	Inputs:	action: fixed string 'logout'
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <Logout>
        result - Was login successful ['OK','FAIL']
		  </Logout>
		</Response>



updateUser -> pageRender::updateUser
	Called from: openDias.accessControls.js :: ananoumouse()
	Purpose: Update a user with new details
	Inputs:	action: fixed string 'updateUser'
          username: the username to update or the fixed string '[current]'
          realname: (optional) The new realname of the updated user
          password: (optional) The new password of the updated user
          role: (optional) The new role of the updated user (not available for '[current]')
	Outputs;
		<?xml version='1.0' encoding='utf-8'?>
		<Response>
		  <UpdateUser>
        result - Was login successful ['OK','FAIL']
		  </UpdateUser>
		</Response>



tagsAutoComplete -> pageRender::tagsAutoComplete
        Called from: openDias.loadDetails.js :: autocomplete function()
        Purpose: Complete a tagname from the start of the name. 
        Inputs: action: fixed string 'tagsAutoComplete'
                startsWith: the beginning of the tags to return.
                docid: the documents id
        Outputs; JSON as required by JQuery autocomplete methods.
              {"results":[
                {"tag":"%s"},
                ...
              ]}



titleAutoComplete -> pageRender::titleAutoComplete
        Called from: openDias.loadDetails.js :: autocomplete function()
        Purpose: Complete a title from the start of the name. 
        Inputs: action: fixed string 'titleAutoComplete'
                startsWith: the beginning of the titles to return.
                notLinkedTo: (optional) Do not return: document with this docid, 
                              or documents linked to this docid
        Outputs; JSON as required by JQuery autocomplete methods.
              {"results":[
                {"docid":"%s","title":"%s"},
                ...
              ]}



uploadfile -> import_doc::uploadfile
  Called from: openDias.acquire.js :: ananoumouse()
  Purpose: Uploads a file, determins its type and includes PDF, ODF and JPEG docs into the document store.
  Encoding: The form submitting this request should not be an AJAX request, but instead a form submision with encoding of enctype="multipart/form-data"
	Inputs:	action: fixed string 'uploadfile'
          uploadfile: (of type 'file') the filename/data of the file being imported
  Outputs: 
    An HTML page which redirect the user to the imported doc detail page.



----------------------------------------------------
status
0   SCAN_IDLE,
1   SCAN_INTERNAL_ERROR,
2   SCAN_DB_WORKING,
3   SCAN_DB_ERROR,                        // DB error code
4   SCAN_WAITING_ON_SCANNER,
5   SCAN_ERRO_FROM_SCANNER,               // SANE error code
6   SCAN_SCANNING,                        // Current progress
7   SCAN_WAITING_ON_NEW_PAGE,             // Waiting for page [x]
8   SCAN_TIMEOUT_WAITING_ON_NEW_PAGE,
9   SCAN_CONVERTING_FORMAT,
10  SCAN_ERROR_CONVERTING_FORMAT,         // FreeImage error code
11  SCAN_PERFORMING_OCR,
12  SCAN_ERROR_PERFORMING_OCR,            // xxxxxx error code
13  SCAN_SANE_BUSY,                       // used to be FIXING_SKEW
14  SCAN_RESERVED_1,
15  SCAN_RESERVED_2,
16  SCAN_FINISHED                         // id of the saved doc

type
1	ODF Document
2	Scanned Document
3	PDF Document
4	Imported Image

ocr Language
eng   International English
deu   German
fra   French
spa   Spanish
ita   Italian
nld   Dutch
por   Brasilian Portuguese
vie   Vietnamese

sort field
0    docid
1    title
2    doc type
3    date
