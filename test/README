

2. How are the tests constructed.
---------------------------------
Tests are generally categorised into four areas.

 * (1_*) Appplication tests
    * Test Coverage - ensure the testsi code coverage are exhaustive.
    * Memory Management - ensure all code handles its memory correctly.
    * Ensure the application can start,stop and handle common,edge use cases.
 * (3_*) Backend API tests:
    * Test Coverage - ensure the testsi code coverage are exhaustive.
    * Memory Management - ensure all code handles its memory correctly.
    * Does the backend return what it's supposed to.
 * QUnit tests
    * Detailed client side funcationality (see ./clientSideTesting/)


These are the main components:

 * setupRun.sh - Checks, builds and refreshes the environment.
                 builds the application and configures the testing
                 tools.
 * harness.pl  - decides what tests are going to be run, keeps track 
                 of passes/failes, and generates the results summary.
 * regressionTest/*.pm - Each actual test. 
                         1_* - App handeling
                         3_* - Are API backend tests

2.1. Test Coverage.
-------------------
To ensure all areas of code are tested, all tests should be run while 
the application is compiled in "--coverage" mode. The test coverage 
can then be analysted after each test run with lcov and genhtml.

2.2. Memory Management.
-----------------------
To ensure that memory is being managed correctly, each test case should 
be run ontop of valgrind. Valgrind will then produce a report of all 
memory and program logical errors.


2.4. Best Practice.
-------------------
To check the code base does not include common errors:
  cppcheck --verbose --enable=all src/

3. Setting up the test environment
----------------------------------

3.1 Getting the harness to compile
-----------------------------------
The main harness has the following dependencies:
  sudo apt-get install valgrind lcov cppcheck libdbd-sqlite3-perl libxml-simple-perl libwww-perl apt-rdepends 
  sudo yum install valgrind lcov cppcheck perl-DBD-SQLite perl-XML-Simple perl-libwww-perl

3.2 Setting up the machine
--------------------------
The test setupRun script will configure and build the application using a prefix of '/tmp/opendias_test'. 
Therefore no special permission are required to before running tests.

4. How to run the tests (automated).
-------------------------------------
cd test
./setupRun.sh
view './index.html' for the test results

