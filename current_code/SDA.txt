INTRODUCTION
------------
Scanned Document Archive (SDA) is an interface that provides document office workflow application to the home user.
The application will accept documents and/or images in a file or from a scanning interface. These documents will then seamlessly be saved into a database using 'tags' as index markers. Optionally, when using an image input, the source can be OCRed, storing the basic text of the document (basic text can also be extracted from other document formats). This text will be linked to and stored along with the original document. Later documents can be browsed, updated, printed or deleted. A second application will provide a user interface to filter by the stored tags and search using the OCRed text or the document body.

MODULES
-------
1. Document collection.
Collect documents either from a ODF file or by scanning a document.
	Allow user to select:
		location of ODF document;
		if to extract basic text;
	or
		number of pages to scan;
		the proposed resolution (always B&W)
		if to OCR the document (OCR will not be done in this module)
SDAs own interface to the Sane API (Similar to Xsane but tailored for SDA use).
After document collection [possible loop for multiple docs] move to module 2.

2. Saving interface
Shows the scanned document, allows users to operate on the image.
	Discard the image - move to the next scan;
	Open the image/document for editing [keep version control].
	OCR (if not already done & is in required resolution) [ocr done here];
	Save with specific tags

3. Retrieve & control
Provides the main interface to the SDA application
	Filter and search documents then allow interaction.
	Filter by tag
	Search by OCR text or document body
	Browse resultant documents
	Change attributes [opens module 2 for specific file(s)]
	Delete, email, print, export [PDF, etc]
	Start an acquisition process [opens module 1]


STRUCTURES
----------
The project will be released under GPL (2 or 3).
The system will be written in C, using the GlibC and GTK interfaces.
The system will be optimised for the GNOME platform, but should be transportable.
The system should be fully localisable.


PRE-REQUISITS
-------------
Scanning API [sane]
OCR interface [teseract]
ODF document search [unknown] (maybe not required)
PDF creator [unknown]
Database [BarkleyDB]

DEV PLAN
--------
0.01 - Publish spec and get buy in from community/developers;
0.02 - Create working areas, project structure and version control systems;
0.03 - Create skeletons for modules;
0.04 - Create calling interfaces between modules;
0.05 - Create error handeling and bubble capture;
0.06 - Lay down DB structure;
1.01 - [module 1] User interface;
1.02 - [module 1] Receive control and reset all holding DB;
1.03 - [module 1] Basic interface into Sane API;
1.04 - [module 1] Scanner detection [UI update];
1.05 - [module 1] Scan image;
1.06 - [module 1] Save image to temp area;
1.07 - [module 1] File locator & copy to temp area;
1.08 - [module 1[ Create holding information db;
1.09 - [module 1] Collection looping system;
1.10 - [module 1] opening module 2 -> pass-off of holding DB.
2.01 - [module 2] User interface;
2.02 - [module 2] SHARED Recieve & checking of holding db and file data;
2.03 - [module 2] OCR inititate;
2.04 - [module 2] Save OCR-Text, update holding DB;
2.05 - [module 2] version control for outside updates, update holding DB;
2.06 - [module 2] discard;
2.07 - [module 2] Detection, parsing & UI display of tags;
2.08 - [module 2] Store tags in holding DB;
2.09 - [module 2] Save files and holding DB in main DB move tmp files to main store.
2.10 - [module 2] return control to module 1;
3.01 - [module 3] User interface;
3.02 - [module 3] Work as program start & entry point
3.03 - [module 3] SHARED Recieve & checking of holding db and file data;
3.04 - [module 3] Query main DB for document list
3.05 - [module 3] Display correct document list in X formats [icon / list]
3.06 - [module 3] User entry of tag for filter / text for search
3.07 - [module 3] Selection of a document -> copy to holding DB, open module 2.
3.08 - [module 3] Selection of a document -> print, email, export.....
3.09 - [module 3] Start collection process -> open module 1.
3.10 - [module 3] About, help, credits


DB STRUCTURE
------------
Holding DB
    Operation
	id				- IP + date (epoc)
	date				- date
	ODF				- doc is an ODF, flag
	image				- doc is an image, flag
	resolution			- scanning def
	pages				- number of pages
	shouldExtract			- flag
    File
	fileId				- counter
	operation			- operation id
	title				- [optional] free text
	user				- operator
	filename			- source file name [tmp filename]
	source				- Where document came from [scan@res / ODF / editedInGimp]
	extract				- extract file name [tmp filename of OCRed text]
    Tags
	tagid				- counter
	operation			- operation id
	tag				- assigned tag
    Ops
	counter				- the image count

Main DB
    Document
	document			- document id
	title				- [optional] free text
	thumbnail			- thumbnail image	
	ODF				- doc is an ODF, flag
	image				- doc is an image, flag
    File
	fileId				- counter
	document			- document id
	user				- operator
	filename			- source file name [tmp filename]
	source				- Where document came from [scan@res / ODF / editedInGimp]
	extract				- extract file name [tmp filename of OCRed text]
    Tags
	tagid				- counter
	operation			- operation id
	tag				- assigned tag



TIME ESTIMATÂ£S
--------------
0.01 - [14 days] 	Publish spec and get buy in from community/developers;
0.02 - [2 days]		Create working areas, project structure and version control systems;
0.03 - [2 days]/0.02	Create skeletons for modules;
0.04 - [1 day]/0.03	Create calling interfaces between modules;
0.05 - [2 days]/0.02	Create error handeling and bubble capture;
0.06 - [1 day]/0.02	Lay down DB structure;
1.01 - [3 days]/0	User interface;
1.02 - [1 day]/0	Receive control and reset all holding DB;
1.03 - [3 days]/1.01	Basic interface into Sane API;
1.04 - [2 days]/1.03	Scanner detection [UI update];
1.05 - [1 day]/1.04	Scan image;
1.06 - [1 day]/1.05	Save image to temp area;
1.07 - [2 days]/1.01	File locator & copy to temp area;
1.08 - [1 day]/1.06	Create holding information db;
1.09 - [1 day]/1.08	Collection looping system;
1.10 - [2 days]/2.02	opening module 2 -> pass-off of holding DB.
2.01 - [2 days]/0	User interface;
2.02 - [2 days]/1.08	SHARED Recieve & checking of holding db and file data;
2.03 - [1 day]/1.06	OCR inititate;
2.04 - [1 day]/2.03	Save OCR-Text, update holding DB;
2.05 - [module 2] version control for outside updates, update holding DB;
2.06 - [module 2] discard;
2.07 - [module 2] Detection, parsing & UI display of tags;
2.08 - [module 2] Store tags in holding DB;
2.09 - [module 2] Save files and holding DB in main DB move tmp files to main store.
2.10 - [module 2] return control to module 1;
3.01 - [3 days]/0	User interface;
3.02 - [1 days]/3.01	Work as program start & entry point
3.03 - [2 days]/1.08	SHARED Recieve & checking of holding db and file data;
3.04 - [module 3] Query main DB for document list
3.05 - [module 3] Display correct document list in X formats [icon / list]
3.06 - [module 3] User entry of tag for filter / text for search
3.07 - [module 3] Selection of a document -> copy to holding DB, open module 2.
3.08 - [module 3] Selection of a document -> print, email, export.....
3.09 - [module 3] Start collection process -> open module 1.
3.10 - [module 3] About, help, credits

